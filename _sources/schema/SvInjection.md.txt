# SvInjection

- [1. Property `SvInjection > SvInjection.pInjection`](#SvInjectionpInjection)
  - [1.1. Property `SvInjection > SvInjection.pInjection > multiplier`](#SvInjectionpInjection_multiplier)
  - [1.2. Property `SvInjection > SvInjection.pInjection > unit`](#SvInjectionpInjection_unit)
  - [1.3. Property `SvInjection > SvInjection.pInjection > value`](#SvInjectionpInjection_value)
- [2. Property `SvInjection > SvInjection.qInjection`](#SvInjectionqInjection)
  - [2.1. Property `SvInjection > SvInjection.qInjection > multiplier`](#SvInjectionqInjection_multiplier)
  - [2.2. Property `SvInjection > SvInjection.qInjection > unit`](#SvInjectionqInjection_unit)
  - [2.3. Property `SvInjection > SvInjection.qInjection > value`](#SvInjectionqInjection_value)
- [3. Property `SvInjection > SvInjection.phase`](#SvInjectionphase)

**Title:** SvInjection

|                           |                                                                           |
| ------------------------- | ------------------------------------------------------------------------- |
| **Type**                  | `object`                                                                  |
| **Required**              | No                                                                        |
| **Additional properties** | [[Any type: allowed]](# "Additional Properties of any type are allowed.") |

**Description:** The SvInjection reports the calculated bus injection minus the sum of the terminal flows. The terminal flow is positive out from the bus (load sign convention) and bus injection has positive flow into the bus. SvInjection may have the remainder after state estimation or slack after power flow calculation.

| Property                                            | Pattern | Type             | Deprecated | Definition                | Title/Description |
| --------------------------------------------------- | ------- | ---------------- | ---------- | ------------------------- | ----------------- |
| - [SvInjection.pInjection](#SvInjectionpInjection ) | No      | object or number | No         | In ./ActivePower.json     | pInjection        |
| - [SvInjection.qInjection](#SvInjectionqInjection ) | No      | object or number | No         | In ./ReactivePower.json   | qInjection        |
| - [SvInjection.phase](#SvInjectionphase )           | No      | enum (of string) | No         | In ./SinglePhaseKind.json | phase             |

## <a name="SvInjectionpInjection"></a>1. Property `SvInjection > SvInjection.pInjection`

**Title:** pInjection

|                |                    |
| -------------- | ------------------ |
| **Type**       | `object or number` |
| **Required**   | No                 |
| **Defined in** | ./ActivePower.json |

**Description:** The active power mismatch between calculated injection and initial injection.  Positive sign means injection into the TopologicalNode (bus).

| Property                                           | Pattern | Type             | Deprecated | Definition               | Title/Description |
| -------------------------------------------------- | ------- | ---------------- | ---------- | ------------------------ | ----------------- |
| - [multiplier](#SvInjectionpInjection_multiplier ) | No      | enum (of string) | No         | In ./UnitMultiplier.json | nan               |
| - [unit](#SvInjectionpInjection_unit )             | No      | enum (of string) | No         | In ./UnitSymbol.json     | nan               |
| - [value](#SvInjectionpInjection_value )           | No      | number           | No         | -                        | nan               |

### <a name="SvInjectionpInjection_multiplier"></a>1.1. Property `SvInjection > SvInjection.pInjection > multiplier`

|                |                       |
| -------------- | --------------------- |
| **Type**       | `enum (of string)`    |
| **Required**   | No                    |
| **Default**    | `"none"`              |
| **Defined in** | ./UnitMultiplier.json |

**Description:** nan

Must be one of:
* "p"
* "n"
* "micro"
* "m"
* "c"
* "d"
* "k"
* "M"
* "G"
* "T"
* "none"
* "y"
* "z"
* "a"
* "f"
* "da"
* "h"
* "P"
* "E"
* "Z"
* "Y"

### <a name="SvInjectionpInjection_unit"></a>1.2. Property `SvInjection > SvInjection.pInjection > unit`

|                |                    |
| -------------- | ------------------ |
| **Type**       | `enum (of string)` |
| **Required**   | No                 |
| **Default**    | `"W"`              |
| **Defined in** | ./UnitSymbol.json  |

**Description:** nan

Must be one of:
* "none"
* "m"
* "kg"
* "s"
* "A"
* "K"
* "mol"
* "cd"
* "deg"
* "rad"
* "sr"
* "Gy"
* "Bq"
* "degC"
* "Sv"
* "F"
* "C"
* "S"
* "H"
* "V"
* "ohm"
* "J"
* "N"
* "Hz"
* "lx"
* "lm"
* "Wb"
* "T"
* "W"
* "Pa"
* "m2"
* "m3"
* "mPers"
* "mPers2"
* "m3Pers"
* "mPerm3"
* "kgm"
* "kgPerm3"
* "WPermK"
* "JPerK"
* "ppm"
* "rotPers"
* "radPers"
* "VA"
* "VAr"
* "cosPhi"
* "Vs"
* "V2"
* "As"
* "A2"
* "A2s"
* "VAh"
* "Wh"
* "VArh"
* "VPerHz"
* "HzPers"
* "character"
* "charPers"
* "kgm2"
* "dB"
* "WPers"
* "lPers"
* "dBm"
* "h"
* "min"
* "Q"
* "Qh"
* "ohmm"
* "APerm"
* "V2h"
* "A2h"
* "Ah"
* "count"
* "ft3"
* "m3Perh"
* "gal"
* "Btu"
* "l"
* "lPerh"
* "lPerl"
* "gPerg"
* "molPerm3"
* "molPermol"
* "molPerkg"
* "sPers"
* "HzPerHz"
* "VPerV"
* "APerA"
* "VPerVA"
* "rev"
* "kat"
* "JPerkg"
* "m3Uncompensated"
* "m3Compensated"
* "WPerW"
* "therm"
* "onePerm"
* "m3Perkg"
* "Pas"
* "Nm"
* "NPerm"
* "radPers2"
* "WPerm2"
* "JPerkgK"
* "JPerm3"
* "VPerm"
* "CPerm3"
* "CPerm2"
* "FPerm"
* "HPerm"
* "JPermol"
* "JPermolK"
* "CPerkg"
* "GyPers"
* "WPersr"
* "WPerm2sr"
* "katPerm3"
* "d"
* "anglemin"
* "anglesec"
* "ha"
* "tonne"
* "bar"
* "mmHg"
* "M"
* "kn"
* "Vh"
* "Mx"
* "G"
* "Oe"
* "WPerA"
* "SPerm"
* "onePerHz"
* "VPerVAr"
* "ohmPerm"
* "kgPerJ"
* "JPers"
* "m2Pers"
* "JPerm2"
* "KPers"
* "PaPers"

### <a name="SvInjectionpInjection_value"></a>1.3. Property `SvInjection > SvInjection.pInjection > value`

|              |          |
| ------------ | -------- |
| **Type**     | `number` |
| **Required** | No       |
| **Default**  | `null`   |

**Description:** nan

## <a name="SvInjectionqInjection"></a>2. Property `SvInjection > SvInjection.qInjection`

**Title:** qInjection

|                |                      |
| -------------- | -------------------- |
| **Type**       | `object or number`   |
| **Required**   | No                   |
| **Defined in** | ./ReactivePower.json |

**Description:** The reactive power mismatch between calculated injection and initial injection.  Positive sign means injection into the TopologicalNode (bus).

| Property                                           | Pattern | Type             | Deprecated | Definition                                               | Title/Description |
| -------------------------------------------------- | ------- | ---------------- | ---------- | -------------------------------------------------------- | ----------------- |
| - [multiplier](#SvInjectionqInjection_multiplier ) | No      | enum (of string) | No         | Same as [multiplier](#SvInjectionpInjection_multiplier ) | nan               |
| - [unit](#SvInjectionqInjection_unit )             | No      | enum (of string) | No         | Same as [unit](#SvInjectionpInjection_unit )             | nan               |
| - [value](#SvInjectionqInjection_value )           | No      | number           | No         | -                                                        | nan               |

### <a name="SvInjectionqInjection_multiplier"></a>2.1. Property `SvInjection > SvInjection.qInjection > multiplier`

|                        |                                                 |
| ---------------------- | ----------------------------------------------- |
| **Type**               | `enum (of string)`                              |
| **Required**           | No                                              |
| **Default**            | `"none"`                                        |
| **Same definition as** | [multiplier](#SvInjectionpInjection_multiplier) |

**Description:** nan

### <a name="SvInjectionqInjection_unit"></a>2.2. Property `SvInjection > SvInjection.qInjection > unit`

|                        |                                     |
| ---------------------- | ----------------------------------- |
| **Type**               | `enum (of string)`                  |
| **Required**           | No                                  |
| **Default**            | `"VAr"`                             |
| **Same definition as** | [unit](#SvInjectionpInjection_unit) |

**Description:** nan

### <a name="SvInjectionqInjection_value"></a>2.3. Property `SvInjection > SvInjection.qInjection > value`

|              |          |
| ------------ | -------- |
| **Type**     | `number` |
| **Required** | No       |
| **Default**  | `null`   |

**Description:** nan

## <a name="SvInjectionphase"></a>3. Property `SvInjection > SvInjection.phase`

**Title:** phase

|                |                        |
| -------------- | ---------------------- |
| **Type**       | `enum (of string)`     |
| **Required**   | No                     |
| **Defined in** | ./SinglePhaseKind.json |

**Description:** The terminal phase at which the connection is applied.   If missing, the injection is assumed to be balanced among non-neutral phases.

Must be one of:
* "A"
* "B"
* "C"
* "N"
* "s1"
* "s2"

----------------------------------------------------------------------------------------------------------------------------
Generated using [json-schema-for-humans](https://github.com/coveooss/json-schema-for-humans) on 2024-04-10 at 07:14:22 -0600
